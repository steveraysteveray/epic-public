# baseURI: http://siemens.com/spin/namespace_functions
# imports: http://spinrdf.org/spl
# imports: http://topbraid.org/spin/spinmapl
# prefix: epic-spin

@prefix : <http://siemens.com/spin/namespace_functions#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix epic-spin: <http://siemens.com/spin/namespace_functions#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spinmap: <http://spinrdf.org/spinmap#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://siemens.com/spin/namespace_functions>
  rdf:type owl:Ontology ;
  owl:imports <http://spinrdf.org/spl> ;
  owl:imports <http://topbraid.org/spin/spinmapl> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
epic-spin:ConcatFooToLabel
  rdf:type spin:Function ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            sp:object [
                sp:varName "alabel" ;
              ] ;
            sp:predicate rdfs:label ;
            sp:subject spin:_arg1 ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type fn:concat ;
                sp:arg1 [
                    sp:varName "alabel" ;
                  ] ;
                sp:arg2 "_Foo" ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdfs:Resource ;
    ] ;
  spin:returnType xsd:string ;
  rdfs:label "Concat foo to label" ;
  rdfs:subClassOf spin:Functions ;
.
epic-spin:build_EPIC_URI
  rdf:type spinmap:TargetFunction ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        rdf:type spif:regex ;
                        sp:arg1 [
                            rdf:type afn:namespace ;
                            sp:arg1 [
                                sp:varName "source" ;
                              ] ;
                          ] ;
                        sp:arg2 "#" ;
                        sp:arg3 "_EPIC#" ;
                      ] ;
                    sp:arg2 [
                        rdf:type afn:localname ;
                        sp:arg1 [
                            sp:varName "source" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  rdfs:comment """Appends the \"_EPIC\" string to the namespace prior to the \"#\" symbol.

 e.g. build_EPIC_URI(“test”) converts <http://example.com/demo#r> to <http://example.com/demo_EPIC#r>.""" ;
  rdfs:label "build EPIC URI" ;
  rdfs:subClassOf spinmap:TargetFunctions ;
.
epic-spin:build_EPIC_URI_1append
  rdf:type spinmap:TargetFunction ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    rdf:type spif:regex ;
                    sp:arg1 [
                        rdf:type afn:namespace ;
                        sp:arg1 [
                            sp:varName "source" ;
                          ] ;
                      ] ;
                    sp:arg2 "#" ;
                    sp:arg3 "_EPIC#" ;
                  ] ;
                sp:arg2 [
                    rdf:type afn:localname ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "partial" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "partial" ;
                      ] ;
                    sp:arg2 "_" ;
                    sp:arg3 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "The name (xsd:string) to be appended after #." ;
    ] ;
  rdfs:comment """Appends the \"_EPIC\" string to the namespace prior to the \"#\" symbol and then appends \"_\" followed by the string represented by ?arg1 at the end of the local name. 

e.g. build_EPIC_URI_1append(“test”) converts <http://example.com/demo#r> to <http://example.com/demo_EPIC#r_test>.""" ;
  rdfs:label "build_EPIC_URI_1 [append]" ;
  rdfs:subClassOf spinmap:TargetFunctions ;
.
epic-spin:build_EPIC_URI_1prop
  rdf:type spinmap:TargetFunction ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    rdf:type spif:regex ;
                    sp:arg1 [
                        rdf:type afn:namespace ;
                        sp:arg1 [
                            sp:varName "source" ;
                          ] ;
                      ] ;
                    sp:arg2 "#" ;
                    sp:arg3 "_EPIC#" ;
                  ] ;
                sp:arg2 [
                    rdf:type afn:localname ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "partial" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "data" ;
              ] ;
            sp:predicate spin:_arg1 ;
            sp:subject [
                sp:varName "source" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "partial" ;
                      ] ;
                    sp:arg2 "_" ;
                    sp:arg3 [
                        sp:varName "data" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The DataType Property element to be appended after ?arg1. " ;
    ] ;
  rdfs:comment """Appends the \"_EPIC\" string to the namespace prior to the \"#\" symbol and then appends the string value that property ?arg1 points to, at the end of the local name.

 e.g. build_EPIC_URI_1prop(hasValue) converts <http://example.com/demo#r> to <http://example.com/demo_EPIC#r_1> where ?source hasValue 1.""" ;
  rdfs:label "build_EPIC_URI_1 [prop]" ;
  rdfs:subClassOf spinmap:TargetFunctions ;
.
epic-spin:build_EPIC_URI_2prop
  rdf:type spinmap:TargetFunction ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    rdf:type spif:regex ;
                    sp:arg1 [
                        rdf:type afn:namespace ;
                        sp:arg1 [
                            sp:varName "source" ;
                          ] ;
                      ] ;
                    sp:arg2 "#" ;
                    sp:arg3 "_EPIC#" ;
                  ] ;
                sp:arg2 [
                    rdf:type afn:localname ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "partial" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "child" ;
              ] ;
            sp:predicate spin:_arg1 ;
            sp:subject [
                sp:varName "source" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "data" ;
              ] ;
            sp:predicate spin:_arg2 ;
            sp:subject [
                sp:varName "child" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:cast ;
                arg:datatype xsd:string ;
                sp:arg1 [
                    sp:varName "data" ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "dataString" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "partial" ;
                      ] ;
                    sp:arg2 "_" ;
                    sp:arg3 [
                        sp:varName "dataString" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The DataType Property element to be appended after ?arg1. " ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType rdf:Property ;
    ] ;
  rdfs:comment """Appends the \"_EPIC\" string to the namespace prior to the \"#\" symbol. Then, performs a 2-depth property traversal identified by property ?arg1 and appends the string value that property ?arg2 points to at the end of the local name. 

 e.g. build_EPIC_URI_2prop(hasChild, hasValue) converts <http://example.com/demo#r> to <http://example.com/demo_EPIC#r_1> where ?source hasChild ?child and ?child hasValue 1 .""" ;
  rdfs:label "build_EPIC_URI_2 [prop]" ;
  rdfs:subClassOf spinmap:TargetFunctions ;
.
epic-spin:modified_buildURI_1
  rdf:type spinmap:TargetFunction ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:replaceAll ;
                sp:arg1 [
                    rdf:type afn:namespace ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
                sp:arg2 "_EPIC" ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 "_" ;
                    sp:arg2 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "modified" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:replaceAll ;
                sp:arg1 [
                    sp:varName "modified" ;
                  ] ;
                sp:arg2 [
                    rdf:type smf:qname ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "targetName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "targetName" ;
                      ] ;
                    sp:arg2 spin:_arg2 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment """The name of the destination class to be appended at the namespace (e.g. OpenADR).
""" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the localname to be appended after # " ;
    ] ;
  rdfs:comment """Replaces the \"_EPIC\" string with the string representation of ?arg1 and then replaces the qname with the string representation of ?arg2. 

e.g.  modified buildURI_1(“OpenADR”, “foo”) converts <http://example.com/demo_EPIC#r_test> to <http://example.com/demo_OpenADR#foo>.""" ;
  rdfs:label "modified buildURI_1" ;
  rdfs:subClassOf spinmap:TargetFunctions ;
.
epic-spin:modified_buildURI_1append
  rdf:type spinmap:TargetFunction ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:replaceAll ;
                sp:arg1 [
                    rdf:type afn:namespace ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
                sp:arg2 "_EPIC" ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 "_" ;
                    sp:arg2 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "modified" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:replaceAll ;
                sp:arg1 [
                    sp:varName "modified" ;
                  ] ;
                sp:arg2 [
                    rdf:type smf:qname ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "targetName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:concat ;
                sp:arg1 [
                    rdf:type afn:localname ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
                sp:arg2 "_" ;
                sp:arg3 spin:_arg2 ;
              ] ;
            sp:variable [
                sp:varName "nqname" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "targetName" ;
                      ] ;
                    sp:arg2 [
                        sp:varName "nqname" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the destination class to be appended at the namespace (e.g. OpenADR)." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the localname to be appended after # " ;
    ] ;
  rdfs:comment """Replaces the \"_EPIC\" string with the string representation of ?arg1 and then appends  \"_\" followed by the string representation of ?arg2 at the end of the localname. 

e.g.  modified buildURI_1append(“OpenADR”, “foo”) converts <http://example.com/demo_EPIC#r> to <http://example.com/demo_OpenADR#r_foo>.""" ;
  rdfs:label "modified buildURI_1 [append]" ;
  rdfs:subClassOf spinmap:TargetFunctions ;
.
epic-spin:modified_buildURI_2
  rdf:type spinmap:TargetFunction ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:replaceAll ;
                sp:arg1 [
                    rdf:type afn:namespace ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
                sp:arg2 "_EPIC" ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 "_" ;
                    sp:arg2 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "modified" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:replaceAll ;
                sp:arg1 [
                    sp:varName "modified" ;
                  ] ;
                sp:arg2 [
                    rdf:type smf:qname ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
                sp:arg3 "" ;
              ] ;
            sp:variable [
                sp:varName "targetName" ;
              ] ;
          ]
          [
            sp:object [
                sp:varName "data" ;
              ] ;
            sp:predicate spin:_arg3 ;
            sp:subject [
                sp:varName "source" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "targetName" ;
                      ] ;
                    sp:arg2 spin:_arg2 ;
                    sp:arg3 "_" ;
                    sp:arg4 [
                        sp:varName "data" ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:comment "The name of the destination class to be appended at the namespace (e.g. OpenADR)." ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg2 ;
      spl:valueType xsd:string ;
      rdfs:comment "The first argument of the localname to be appended after # e.g. epic:{?arg2}" ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg3 ;
      spl:valueType rdf:Property ;
      rdfs:comment "The second name of the localname to be appended after # e.g. epic:{?arg2}{?arg3}." ;
    ] ;
  rdfs:comment """Replaces the \"_EPIC\" string with the string representation of ?arg1. Then then appends  \"_\" followed by the string representation of ?arg2 at the end of the localname. Finally, appends \"_\"  followed by the string value that property ?arg3 points to, at the end of the localname.

e.g.  modified buildURI_2(“OpenADR”, “foo”, hasName) converts <http://example.com/demo_EPIC#r> to <http://example.com/demo_OpenADR#r_foo_bar> where ?source hasName \"bar\".""" ;
  rdfs:label "modified buildURI_2" ;
  rdfs:subClassOf spinmap:TargetFunctions ;
.
epic-spin:modified_changeNamespace
  rdf:type spinmap:TargetFunction ;
  spin:body [
      rdf:type sp:Select ;
      sp:resultVariables (
          [
            sp:varName "result" ;
          ]
        ) ;
      sp:where (
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type spif:replaceAll ;
                sp:arg1 [
                    rdf:type afn:namespace ;
                    sp:arg1 [
                        sp:varName "source" ;
                      ] ;
                  ] ;
                sp:arg2 "_EPIC" ;
                sp:arg3 [
                    rdf:type sp:concat ;
                    sp:arg1 "_" ;
                    sp:arg2 spin:_arg1 ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "targetName" ;
              ] ;
          ]
          [
            rdf:type sp:Bind ;
            sp:expression [
                rdf:type sp:iri ;
                sp:arg1 [
                    rdf:type sp:concat ;
                    sp:arg1 [
                        sp:varName "targetName" ;
                      ] ;
                    sp:arg2 [
                        rdf:type afn:localname ;
                        sp:arg1 [
                            sp:varName "source" ;
                          ] ;
                      ] ;
                  ] ;
              ] ;
            sp:variable [
                sp:varName "result" ;
              ] ;
          ]
        ) ;
    ] ;
  spin:constraint [
      rdf:type spl:Argument ;
      spl:predicate sp:arg1 ;
      spl:valueType xsd:string ;
      rdfs:label "The namespace suffix that will appended for the URI of the destination class." ;
    ] ;
  rdfs:comment """Replaces the \"_EPIC\" string with the string representation of ?arg1 

e.g.  modified_changeNamespace(\"OpenADR\") converts <http://example.com/demo_EPIC#r> to <http://example.com/demo_OpenADR#r>.
""" ;
  rdfs:label "modified change namespace" ;
  rdfs:subClassOf spinmap:TargetFunctions ;
.
